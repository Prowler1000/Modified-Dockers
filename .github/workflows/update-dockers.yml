name: Build and Push Docker Images

on:
  push:
    paths:
      - '**/Dockerfile'
  workflow_dispatch:
    inputs:
      sha_before:
        description: 'The "before" commit SHA to compare against. '
        required: false
        type: string
      sha_after:
        description: 'The "after" commit SHA to compare against. '
        required: false
        type: string
      target_dockerfile:
        description: 'The Dockerfile to build. '
        required: false
        type: string

env:
  IS_DEFAULT_BRANCH: ${{ github.ref_name == github.event.repository.default_branch }}

jobs:

  setup:
    runs-on: ubuntu-latest
    outputs:
      dockerfile_paths: ${{ steps.parse-files.outputs.changed_dockerfiles }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
            fetch-depth: ${{ github.event_name == 'pull_request' && 2 || 0 }}
      - name: Get changed files
        id: changed-files
        run: |
            if [[ -n "${{ inputs.sha_before }}" && -n "${{ inputs.sha_after }}" ]]; then
              echo "changed_files=$(git diff --name-only ${{ inputs.sha_before }} ${{ inputs.sha_after }} | xargs)" >> $GITHUB_ENV
            elif [[ -n "${{ inputs.target_dockerfile }}" ]]; then
              echo "changed_files=${{ inputs.target_dockerfile }}" >> $GITHUB_ENV
            elif ${{ github.event_name == 'pull_request' }}; then
                echo "changed_files=$(git diff --name-only -r HEAD^1 HEAD | xargs)" >> $GITHUB_ENV
            else
                echo "changed_files=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | xargs)" >> $GITHUB_ENV
            fi
      - name: Filter Dockerfiles
        id: filter-files
        run: |
            echo "filtered_files=$(echo ${{ env.changed_files }} | tr ' ' '\n' | grep -E 'Dockerfile' | tr '\n' ' ')" >> $GITHUB_ENV
      - name: Parse changed files
        id: parse-files
        run: |
          echo changed_dockerfiles=$(echo ${{ env.filtered_files }} | tr ' ' '\n' | jq -R . | jq -s '{dockerfile_path: .}') >> $GITHUB_OUTPUT

  build:
    needs: setup
    strategy:
      matrix: ${{ fromJson(needs.setup.outputs.dockerfile_paths) }}

    runs-on: ubuntu-latest

    steps:
      - name: Split path
        id: split
        run: |
            echo "image-path=prowler1000/$(echo ${{ matrix.dockerfile_path }} | cut -d'/' -f1)" >> $GITHUB_ENV
            echo "dockerfile-path=$(echo ${{ matrix.dockerfile_path }})" >> $GITHUB_ENV
            echo "build-context=$(dirname ${{ matrix.dockerfile_path }})" >> $GITHUB_ENV

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images:
            ${{ env.image-path }}
          tags: |
            type=raw,value=latest
            type=ref,event=branch,enable=${{ env.IS_DEFAULT_BRANCH == 'false' }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.build-context }}
          file: ${{ env.dockerfile-path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha, mode=max, scope=${{ env.dockerfile-path }}